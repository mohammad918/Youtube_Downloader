from PyQt5.QtWidgets import *from PyQt5.QtCore import *from PyQt5.QtGui import QIconfrom welcome import Ui_welcomefrom signin import Ui_signinfrom signup import Ui_signupfrom profile import Ui_profilefrom aboutme import Ui_about_mefrom home import Ui_homefrom downloader import Ui_downloaderfrom finish import Ui_finishfrom downloading import Ui_progressfrom webbrowser import openfrom pytube import YouTubefrom plyer import notificationimport sqlite3import reconnection = sqlite3.connect('../youtube_downloader.db')C = connection.cursor()C.execute('''CREATE TABLE IF NOT EXISTS logsign(username TEXT NOT NULL UNIQUE,             email TEXT NOT NULL UNIQUE,             password TEXT NOT NULL)''')connection.commit()count=0information={"username":"NULL", "email":"NULL", "password":"NULL"}class  forfinish(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.end=Ui_finish()        self.end.setupUi(self)        self.setWindowFlag(Qt.FramelessWindowHint)        self.setAttribute(Qt.WA_TranslucentBackground)        self.end.back.clicked.connect(self.home)        self.show()    def mousePressEvent(self, evt):        self.oldPos=evt.globalPos()    def mouseMoveEvent(self, evt):        delta=QPoint(evt.globalPos() - self.oldPos)        self.move(self.x() + delta.x(), self.y() + delta.y())        self.oldPos=evt.globalPos()    def home(self):        self.back=forhome()        self.back.show()        self.close()class forprogress(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.progress=Ui_progress()        self.progress.setupUi(self)        self.setWindowFlag(Qt.FramelessWindowHint)        self.setAttribute(Qt.WA_TranslucentBackground)        self.show()    def mousePressEvent(self, evt):        self.oldPos=evt.globalPos()    def mouseMoveEvent(self, evt):        delta=QPoint(evt.globalPos() - self.oldPos)        self.move(self.x() + delta.x(), self.y() + delta.y())        self.oldPos=evt.globalPos()class forabout(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.about=Ui_about_me()        self.about.setupUi(self)        self.setWindowFlag(Qt.FramelessWindowHint)        self.setAttribute(Qt.WA_TranslucentBackground)        self.about.pushButton.clicked.connect(self.home)        self.about.pushButton_2.clicked.connect(self.Download)        self.about.pushButton_3.clicked.connect(self.profile)        self.about.github.clicked.connect(self.github)        self.about.social.clicked.connect(self.social)        self.about.email.clicked.connect(self.email)        self.show()    def mousePressEvent(self, evt):        self.oldPos=evt.globalPos()    def mouseMoveEvent(self, evt):        delta=QPoint(evt.globalPos() - self.oldPos)        self.move(self.x() + delta.x(), self.y() + delta.y())        self.oldPos=evt.globalPos()    def Download(self):        self.download=fordownload()        self.download.show()        self.close()    def home(self):        self.home=forhome()        self.home.show()        self.close()    def profile(self):        self.profile=forprofile()        self.profile.show()        self.close()    def github(self):        open("https://github.com/mohammad918")    def social(self):        open("https://zil.ink/MMTavakoli")    def email(self):        open("mailto:?to=matttavakoli@gmail.com&subject='Hi there'", new=1)class forprofile(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.profile=Ui_profile()        self.profile.setupUi(self)        self.setWindowFlag(Qt.FramelessWindowHint)        self.setAttribute(Qt.WA_TranslucentBackground)        self.profile.pushButton.clicked.connect(self.edit)        self.profile.pushButton_2.clicked.connect(self.home)        self.profile.pushButton_3.clicked.connect(self.download)        self.profile.pushButton_4.clicked.connect(self.about)        self.profile.image.clicked.connect(self.image)        self.profile.label_8.setText(information["username"])        self.profile.label_7.setText(information["email"])        self.profile.label_6.setText(information["password"])        self.show()    def mousePressEvent(self, evt):        self.oldPos=evt.globalPos()    def mouseMoveEvent(self, evt):        delta=QPoint(evt.globalPos() - self.oldPos)        self.move(self.x() + delta.x(), self.y() + delta.y())        self.oldPos=evt.globalPos()    def image(self):        filename, _ = QFileDialog.getOpenFileName(self, 'Select Photo', QDir.currentPath(), 'Images (*.png *.jpg *.jpeg)')        if not filename:            return        self.profile.image.setIcon(QIcon(filename))    def home(self):        self.home=forhome()        self.home.show()        self.close()    def download(self):        self.download=fordownload()        self.download.show()        self.close()    def about(self):        self.about=forabout()        self.about.show()        self.close()    def edit(self):        Username=self.profile.lineEdit.text()        Email=self.profile.lineEdit_2.text()        Password=self.profile.lineEdit_3.text()        regex = r"""^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$"""        RESULT = re.search(regex, Email)        if (len(Username) and len(Password) >= 5) and RESULT is not None:            statement = "UPDATE logsign SET username=?, email=?, password=? WHERE username= ?"            data_tuple = (Username, Email, Password, information["username"])            C.execute(statement, data_tuple)            connection.commit()            information["username"] = Username            information["email"] = Email            information["password"] = Password            notification.notify(                title='DONE',                message="the information successfully restored",                app_name="Youtube Downloader",                app_icon=None)            self.profile.label_8.setText(information["username"])            self.profile.label_7.setText(information["email"])            self.profile.label_6.setText(information["password"])        else:            notification.notify(                title='Error',                message="invalid information entered, FYI username and password should be more than 5 characters"                        "and make sure you haven't entered password before",                app_name="Password Generator",                app_icon=None)class fordownload(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.download=Ui_downloader()        self.download.setupUi(self)        self.setWindowFlag(Qt.FramelessWindowHint)        self.setAttribute(Qt.WA_TranslucentBackground)        self.download.pushButton.clicked.connect(self.home)        self.download.pushButton_2.clicked.connect(self.profile)        self.download.pushButton_3.clicked.connect(self.about)        self.download.pushButton_4.clicked.connect(self.Downloader)        self.download.toolButton.clicked.connect(self.save)        self.show()    def mousePressEvent(self, evt):        self.oldPos=evt.globalPos()    def mouseMoveEvent(self, evt):        delta=QPoint(evt.globalPos() - self.oldPos)        self.move(self.x() + delta.x(), self.y() + delta.y())        self.oldPos=evt.globalPos()    def home(self):        self.home=forhome()        self.home.show()        self.close()    def profile(self):        self.profile=forprofile()        self.profile.show()        self.close()    def about(self):        self.about=forabout()        self.about.show()        self.close()    def save(self):        saved=QFileDialog.getExistingDirectory()        self.download.lineEdit_2.setText(saved)    def Downloader(self):        global count        self.prog=forprogress()        self.prog.show()        self.close()        self.prog.progressBar.setValue(count)        if count == 40:            URL=self.download.lineEdit.text()            finalsave=self.download.lineEdit_2.text()            confirmation=re.compile('https://youtu.be/')            if re.match(confirmation, URL) is not None:                YT=YouTube(URL)                stream=YT.streams.filter(file_extension='mp4').get_highest_resolution()                stream.download(filename="Chosen_Video",output_path= finalsave)            else:                notification.notify(title='Error',                    message="Please Make sure that  you are connected to Internet")        if count > 100:            self.finish=forfinish()            self.finish.show()            self.close()class forhome(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.home=Ui_home()        self.home.setupUi(self)        self.setWindowFlag(Qt.FramelessWindowHint)        self.setAttribute(Qt.WA_TranslucentBackground)        self.home.pushButton.clicked.connect(self.download)        self.home.pushButton_3.clicked.connect(self.profile)        self.home.pushButton_2.clicked.connect(self.about)        self.show()    def mousePressEvent(self, evt):        self.oldPos=evt.globalPos()    def mouseMoveEvent(self, evt):        delta=QPoint(evt.globalPos() - self.oldPos)        self.move(self.x() + delta.x(), self.y() + delta.y())        self.oldPos=evt.globalPos()    def download(self):        self.download=fordownload()        self.download.show()        self.close()    def profile(self):        self.profile=forprofile()        self.profile.show()        self.close()    def about(self):        self.about=forabout()        self.about.show()        self.close()class forsignin(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.signin=Ui_signin()        self.signin.setupUi(self)        self.setWindowFlag(Qt.FramelessWindowHint)        self.setAttribute(Qt.WA_TranslucentBackground)        self.signin.back.clicked.connect(self.back)        self.signin.pushButton.clicked.connect(self.signup)        self.signin.pushButton_2.clicked.connect(self.forgot)        self.signin.pushButton_3.clicked.connect(self.home)        self.show()    def mousePressEvent(self, evt):        self.oldPos=evt.globalPos()    def mouseMoveEvent(self, evt):        delta=QPoint(evt.globalPos() - self.oldPos)        self.move(self.x() + delta.x(), self.y() + delta.y())        self.oldPos=evt.globalPos()    def back(self):        self.back=forwelcome()        self.back.show()        self.close()    def signup(self):        self.signup=forsignup()        self.signup.show()        self.close()    def forgot(self):        notification.notify(                title='update',                message="unfortunately we haven't still added this feature, it will be active soon",                app_name="Youtube Downloader",                app_icon=None)    def home(self):        Username=self.signin.lineEdit.text()        Password=self.signin.lineEdit_2.text()        statement = "SELECT username, email, password FROM logsign"        C.execute(statement)        for U, E, P in C.fetchall():            if (Username == U or E) and (Password == P):                self.home = forhome()                self.home.show()                self.close()                information["username"] = U                information["email"] = E                information["password"] = P        if information["username"] and information["email"] and information["password"] == "NULL":            notification.notify(                title='Error',                message="please fill out all fields correctly",                app_name="Youtube Downloader",                app_icon=None)class forsignup(QMainWindow):    def __init__ (self):        QMainWindow.__init__(self)        self.signup=Ui_signup()        self.signup.setupUi(self)        self.setWindowFlag(Qt.FramelessWindowHint)        self.setAttribute(Qt.WA_TranslucentBackground)        self.signup.back.clicked.connect(self.back)        self.signup.pushButton_2.clicked.connect(self.signin)        self.signup.pushButton.clicked.connect(self.home)        self.show()    def mousePressEvent(self, evt):        self.oldPos=evt.globalPos()    def mouseMoveEvent(self, evt):        delta=QPoint(evt.globalPos() - self.oldPos)        self.move(self.x() + delta.x(), self.y() + delta.y())        self.oldPos=evt.globalPos()    def back(self):        self.back=forwelcome()        self.back.show()        self.close()    def signin(self):        self.signin=forsignin()        self.signin.show()        self.close()    def home(self):        Username=self.signup.lineEdit.text()        Email=self.signup.lineEdit_2.text()        Password=self.signup.lineEdit_3.text()        regex = r"""^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$"""        RESULT = re.search(regex, Email)        if (len(Username) and len(Password) >= 5) and RESULT is not None:            statement = """INSERT INTO logsign(username, email, password) VALUES(?, ?, ?)"""            data_tuple = (Username, Email, Password)            C.execute(statement, data_tuple)            connection.commit()            notification.notify(                title='Done',                message="the account was made successfully",                app_name="Youtube Downloader",                app_icon=None)            self.signin = forsignin()            self.signin.show()            self.close()        else:            notification.notify(                title='Error',                message="invalid information entered, FYI username and password should be more than 5 characters"                        "and make sure you haven't entered password before",                app_name="Youtube Downloader",                app_icon=None)class forwelcome(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.welcome=Ui_welcome()        self.welcome.setupUi(self)        self.setWindowFlag(Qt.FramelessWindowHint)        self.setAttribute(Qt.WA_TranslucentBackground)        self.welcome.pushButton.clicked.connect(self.signup)        self.welcome.pushButton_2.clicked.connect(self.signin)        self.show()    def mousePressEvent(self, evt):        self.oldPos=evt.globalPos()    def mouseMoveEvent(self, evt):        delta=QPoint(evt.globalPos() - self.oldPos)        self.move(self.x() + delta.x(), self.y() + delta.y())        self.oldPos=evt.globalPos()    def signup(self):        self.signup=forsignup()        self.signup.show()        self.close()    def signin(self):        self.signin=forsignin()        self.signin.show()        self.close()if __name__ == '__main__':    import sys    app=QApplication(sys.argv)    Root=forwelcome()    sys.exit(app.exec_())